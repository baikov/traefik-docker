version: '3.9'
volumes:
  prod_traefik:
    name: prod_traefik
  prometheus_data: {}

networks:
  front:
    name: front
  back-tier:

services:
  traefik:
    build:
      context: ./config/traefik
    container_name: prod_traefik
    security_opt:
      - no-new-privileges:true
    command:
        - --configFile=/static.yml # Initial config from static.yml file
        - --certificatesresolvers.letsencrypt.acme.email=${EMAIL}
        # - --pilot.token=${PILOT_TOKEN}

    ports:
      - "80:80"
      - "443:443"
      - "5555:5555"
      - "9090:9090"
      - "8080:8080"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - prod_traefik:/etc/traefik/acme:z
      - ./log:/var/log/traefik
      - ./config/traefik/static.yml:/static.yml
      - ./config/traefik/dynamic.yml:/etc/traefik/dynamic.yml
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=front"

      # Rules and middlewares asociation with entrypoints
      # - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      # - "traefik.http.routers.http-catchall.entrypoints=web"
      # - "traefik.http.routers.http-catchall.middlewares=redirect-to-https,security-headers"
      # - "traefik.http.routers.https-catchall.rule=hostregexp(`{host:.+}`)"
      # - "traefik.http.routers.https-catchall.entrypoints=websecure"
      # - "traefik.http.routers.https-catchall.middlewares=security-headers"
      # - "traefik.http.routers.https-catchall.middlewares=custom-redirect,security-headers"

      # Secure Dashboard (http basic auth)
      # - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_DASHBOARD}.${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      # - "traefik.http.routers.dashboard.rule=Host(`${SERVER_IP}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      # - "traefik.http.routers.dashboard.service=api@internal"
      # - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      # - "traefik.http.routers.dashboard.entrypoints=websecure"
      # - "traefik.http.routers.dashboard.middlewares=security-headers,admin"

      # Redirect from www to non-www and http to https
      # - "traefik.http.middlewares.custom-redirect.redirectregex.regex=^https?://(www.)?(.*)"
      # - "traefik.http.middlewares.custom-redirect.redirectregex.replacement=https://$${2}"
      # - "traefik.http.middlewares.custom-redirect.redirectregex.permanent=true"
      # Redirect 301 to https Middleware
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"
      # Security headers middleware
      # - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      # - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      # - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      # - "traefik.http.middlewares.security-headers.headers.sslRedirect=true"
      # - "traefik.http.middlewares.security-headers.headers.hostsProxyHeaders=['X-CSRFToken']"
      #HSTS Configuration
      # - "traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true"
      # - "traefik.http.middlewares.security-headers.headers.stsPreload=true"
      # - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      # - "traefik.http.middlewares.security-headers.headers.forceSTSHeader=true"
      # gzip compression
      # - "traefik.http.middlewares.gzip.compress=true"
      # Dashboard auth
      - "traefik.http.middlewares.admin.basicauth.users=${DASHBOARD_LOG_PSW}"

    restart: unless-stopped
    networks:
      - front

  prometheus:
    image: prom/prometheus
    volumes:
      - ./config/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=front"
      # - "traefik.http.routers.prometheus.rule=Host(`prom.${DOMAIN}`)"
      # - "traefik.http.routers.prometheus.rule=Host(`${SERVER_IP}`)"
      - "traefik.http.routers.prometheus.entrypoints=prometheus"
      # Enables tls
      # - "traefik.http.routers.flower.tls=true"
      # Asociation with resolver (see static.yml file)
      # - "traefik.http.routers.flower.tls.certresolver=letsencrypt"
      # add security middleware
      # - "traefik.http.routers.prometheus.middlewares=security-headers"
      # Set default options (see dynamic.yaml for this)
      # - "traefik.http.routers.prometheus.tls.options=default"
      # loadbalancer
      - "traefik.http.routers.prometheus.service=prometheus"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"



      # - "traefik.http.routers.prometheus.rule=Host(`${PROMETHEUS_DASHBOARD}.${DOMAIN}`)"
      # - "traefik.http.routers.prometheus.service=prometheus"
      # - "traefik.http.routers.nginx.priority=70"
      # - "traefik.http.routers.prometheus.entrypoints=websecure"
      # - "traefik.http.routers.prometheus.tls=true"
      # - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      # - "traefik.http.routers.prometheus.middlewares=custom-redirect@file, security-headers"
      # - "traefik.http.routers.prometheus.tls.options=default"
    networks:
      - front
    restart: unless-stopped
